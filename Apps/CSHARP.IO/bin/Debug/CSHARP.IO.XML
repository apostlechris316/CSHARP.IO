<?xml version="1.0"?>
<doc>
    <assembly>
        <name>CSHARP.IO</name>
    </assembly>
    <members>
        <member name="T:CSHARP.IO.BinaryFileHelper">
            <summary>
            Binary File Helper Functions
            </summary>
        </member>
        <member name="M:CSHARP.IO.BinaryFileHelper.ReadStream(System.String)">
            <summary>
            Opens the file and returns the stream to be read from
            </summary>
            <param name="fileName">name of file to get contents from</param>
            <returns>FileStream object</returns>
            <remarks>V1.0.0.3 - New method</remarks>
        </member>
        <member name="M:CSHARP.IO.BinaryFileHelper.ReadContents(System.String)">
            <summary>
            Reads the full contents of the file to a byte array
            </summary>
            <param name="fileName">name of file to get contents from</param>
            <returns>Array of bytes containing the content</returns>
        </member>
        <member name="M:CSHARP.IO.BinaryFileHelper.WriteContents(System.String,System.Byte[])">
            <summary>
            Writes the contents supplied to a file.
            </summary>
            <param name="fileName">file to write contents to</param>
            <param name="contents">contents to write</param>
        </member>
        <member name="T:CSHARP.IO.FileHelper">
            <summary>
            C# Class containing Static Methods to help working with files and file paths.
            </summary>
        </member>
        <member name="M:CSHARP.IO.FileHelper.EnsureDirectoryExists(System.String)">
            <summary>
            Creaet a directory if it does not already exist
            </summary>
            <param name="directory"></param>
            <remarks>NEW in v1.0.0.10</remarks>
        </member>
        <member name="M:CSHARP.IO.FileHelper.CopyDirectory(System.String,System.String)">
            <summary>
            Copies a directory 
            </summary>
            <param name="sourceFullPath">Full path to directory to copy from</param>
            <param name="destinationFullPath">Full path to copy directory to</param>
            <remarks>NEW in v1.0.0.8</remarks>
        </member>
        <member name="M:CSHARP.IO.FileHelper.CopyDirectory(System.IO.DirectoryInfo,System.IO.DirectoryInfo)">
            <summary>
            Copies a directory 
            </summary>
            <param name="source">Directory to copy from</param>
            <param name="destination">Directory to</param>
            <remarks>NEW in v1.0.0.8</remarks>
        </member>
        <member name="M:CSHARP.IO.FileHelper.GetSubDirectories(System.String)">
            <summary>
            returns a list of directories beneath a given directory
            </summary>
            <param name="directoryFullPath"></param>
            <returns></returns>
        </member>
        <member name="F:CSHARP.IO.FileHelper.DirectorySeparator">
            <summary>
            Directory Separator (may be different depending on operation system
            </summary>
            <remarks>V1.0.0.2 - Proper Case now used</remarks>
        </member>
        <member name="M:CSHARP.IO.FileHelper.EnsureTrailingDirectorySeparator(System.String)">
            <summary>
            Returns the originally passed in directoryPath but includes Directory seperator if not already at the end.
            </summary>
            <param name="directoryPath">Full path to directory</param>
            <returns>Directory with a slash on the end</returns>
            <remarks>NEW IN 1.0.0.1</remarks>
        </member>
        <member name="M:CSHARP.IO.FileHelper.ConvertAbsoluteFilePathToUri(System.String)">
            <summary>
            Converts a local absolute file path to Uri
            </summary>
            <param name="absoluteFilePath"></param>
            <returns></returns>
        </member>
        <member name="M:CSHARP.IO.FileHelper.ConvertLocalUriToAbsoluteFilePath(System.Uri)">
            <summary>
            Converts local Uri to Absolute File Path
            </summary>
            <param name="localUri"></param>
            <returns></returns>
            <remarks>New In v1.0.0.9</remarks>
        </member>
        <member name="M:CSHARP.IO.FileHelper.GetDirectoryFromFilePath(System.String)">
            <summary>
            Returns Directory Portion of FullPath
            </summary>
            <param name="fullPath">full path to a file</param>
            <returns>Directory portion of file path</returns>
        </member>
        <member name="M:CSHARP.IO.FileHelper.GetDirectoryFolderNameFromDirectoryPath(System.String)">
            <summary>
            Returns Last DirectoryFolderName from of DirectoryPath
            </summary>
            <param name="fullPath">full path to a directory folder</param>
            <returns>Directory folder name from full path</returns>
        </member>
        <member name="M:CSHARP.IO.FileHelper.GetFileNameFromFilePath(System.String)">
            <summary>
            Returns FileName Portion of FullPath
            </summary>
            <param name="fullPath">full path to a file</param>
            <returns>Filename from full path</returns>
        </member>
        <member name="M:CSHARP.IO.FileHelper.GetFileListForDirectory(System.String)">
            <summary>
            Returns a list of FileInfo for files in a given directory
            </summary>
            <param name="fileSystemDirectoryPath">Full path to directory containing the files</param>
            <returns>An array of FileInfo object for each file in the directory</returns>
        </member>
        <member name="M:CSHARP.IO.FileHelper.GetFilteredFileListForDirectory(System.String,System.String,System.Boolean)">
            <summary>
            Returns a list of FileInfo for files in a given directory
            </summary>
            <param name="fileSystemDirectoryPath">Full path to directory containing the files</param>
            <param name="searchPattern">Filter used to determine which files get returned</param>
            <param name="recursive">If true, returns all files for all subdirectories as well</param>
            <returns>An array of FileInfo object for each file in the directory matching the filter</returns>
        </member>
        <member name="M:CSHARP.IO.FileHelper.IsFileOverMaxSize(System.IO.FileInfo,System.Int64)">
            <summary>
            Returns true if file size is greater than maximum file size
            </summary>
            <param name="fileInfo">File Information Object</param>
            <param name="maxFileSize">Maximum File Size</param>
            <returns>True, if the file size is greater than the max file size passed in</returns>
            <remarks>NEW IN V1.0.0.4</remarks>
        </member>
        <member name="T:CSHARP.IO.TextFileHelper">
            <summary>
            Text File Helper Functions
            </summary>
        </member>
        <member name="M:CSHARP.IO.TextFileHelper.OpenInputFileStream(System.String)">
            <summary>
            Opens the input file stream
            </summary>
            <param name="fileName">Full path to file</param>
            <returns>Stream to read from</returns>
            <remarks>NEW in V1.0.0.5
            V1.0.0.7 - Notice that CloseInputFileStream was removed.  Use "Using" instead as it will handle Close and Dispose automatically for you. 
            </remarks>
        </member>
        <member name="M:CSHARP.IO.TextFileHelper.ReadContents(System.String)">
            <summary>
            Reads the full contents of the file to a string
            </summary>
            <param name="fileName">name of file to get contents from</param>
            <returns>full contents of the file as a string</returns>
            <remarks>v1.0.0.7 Converted to using and removed redundant Close and Dispose</remarks>
        </member>
        <member name="M:CSHARP.IO.TextFileHelper.ReadContents(System.String,System.String)">
            <summary>
            Reads the full contents of the file to a string using specific encoding
            </summary>
            <param name="fileName">name of file to get contents from</param>
            <param name="encoding"></param>
            <returns>full contents of the file as a string</returns>
            <remarks>v1.0.0.7 Converted to using and removed redundant Close and Dispose<br/>
            v1.0.0.8 Now supports passing in encoding</remarks>
        </member>
        <member name="M:CSHARP.IO.TextFileHelper.WriteContents(System.String,System.String,System.Boolean)">
            <summary>
            Writes the contents supplied to a file.
            </summary>
            <param name="fileName">file to write contents to</param>
            <param name="contents">contents to write</param>
            <param name="overwrite">if true overwrites existing file else appends to end</param>
            <remarks>v1.0.0.7 Converted to using and removed redundant Close and Dispose</remarks>
        </member>
        <member name="M:CSHARP.IO.TextFileHelper.WriteContents(System.String,System.String,System.Boolean,System.String)">
            <summary>
            Writes the contents supplied to a file.
            </summary>
            <param name="fileName">file to write contents to</param>
            <param name="contents">contents to write</param>
            <param name="overwrite">if true overwrites existing file else appends to end</param>
            <param name="encoding">Determines how contents is encoded on write possible values are (ASCII,UTF7,UTF8,UTF32, or empty string). If empty string it uses the default encoding.</param>
            <remarks>NEW in v1.0.0.8 </remarks>
        </member>
        <member name="M:CSHARP.IO.TextFileHelper.ReplaceInFile(System.String,System.String,System.String)">
            <summary>
            Opens a file, replaces a string with another string then saves the file
            </summary>
            <param name="fileName">Full path to file</param>
            <param name="find">Text to find</param>
            <param name="replace">Text to replace</param>
            <remarks>NEW in 1.0.0.8 </remarks>
        </member>
        <member name="T:CSHARP.IO.TextStreamHelper">
            <summary>
            Text Stream Helper Functions
            </summary>
        </member>
        <member name="M:CSHARP.IO.TextStreamHelper.ReadContents(System.IO.FileInfo)">
            <summary>
            Reads the full contents of the file to a string
            </summary>
            <param name="fileInfo">FileInfo object used to open the stream for read</param>
            <returns>Contents of the stream in a string</returns>
            <remarks>NEW in v1.0.0.9</remarks>
        </member>
        <member name="M:CSHARP.IO.TextStreamHelper.ReadContents(System.IO.Stream)">
            <summary>
            Reads the full contents of the file to a string
            </summary>
            <param name="stream">Stream to get contents from</param>
            <returns>Contents of the stream in a string</returns>
            <remarks>Beware as stream passsed in is passed to StreamReader so likely it will be disposed when returned</remarks>
        </member>
        <member name="M:CSHARP.IO.TextStreamHelper.WriteContents(System.IO.FileInfo,System.String)">
            <summary>
            Writes the contents supplied to a file. (Always Overwrites the file. If you wish to append use WriteContents with file path)
            </summary>
            <param name="fileInfo">FileInfo object used to open the stream for write</param>
            <param name="contents">contents to write</param>
            <remarks>NEW in v1.0.0.9</remarks>
        </member>
        <member name="M:CSHARP.IO.TextStreamHelper.WriteContents(System.String,System.String,System.Boolean)">
            <summary>
            Writes the contents supplied to a file.
            </summary>
            <param name="fileName">file to write contents to</param>
            <param name="contents">contents to write</param>
            <param name="overwrite">if true overwrites existing file else appends to end</param>
            <remarks>Beware as stream passsed in is passed to StreamWriter so likely it will be disposed when returned</remarks>
        </member>
    </members>
</doc>
